---
# file: roles/docker-openldap/tasks/main.yaml

# This will generate passwords for these accounts.
# A manuel step of setting the passwords into the LDAP database is required
- name: Check preconditions
  assert:
    that:
    - openldap_admin_password is defined
    - openldap_proxyagent_password is defined

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ openldap_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: before_backup script part
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.openldap

- name: after_backup script part
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.openldap

# *****************************************************************************
# update the Docker restore config

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ openldap_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_openldap_restore

# *****************************************************************************
# Update or make the image.
- name: Checkout image repo
  git:
    repo: '{{ openldap_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-openldap'

- name: build image
  docker_build:
    image_name: '{{ openldap_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    dockerfile_dir: '{{ docker_projects_dir }}/docker-openldap'

# *****************************************************************************
# Create the data volumes

- name: data-volume container
  docker_datavolume:
    image_name: '{{ openldap_image_name }}'
    image_tag: '{{ docker_image_tag }}'
    data_volume_container_name: '{{ openldap_dv_name }}'

# *****************************************************************************
# Populate the ldap data-volume with default data

- name: initial populate
  docker_container:
    command: ['init_data_volumes']
    detach: false
    image: '{{ openldap_image_name }}:{{ docker_image_tag }}'
    name: openldap_populate
    volumes:
      - '{{ openldap_dv_name }}'
  when: st_openldap_restore.stat.exists == False

- name: initial populate
  docker_container:
    name: openldap_populate
    state: absent

# *****************************************************************************
# Start the data container running

- name: start container (ldap)
  docker_container:
    detach: true
    env:
      LDAP_HOSTNAME: '{{ container_addr_map.ldap.hostname }}'
    hostname: '{{ container_addr_map.ldap.hostname }}'
    image: '{{ openldap_image_name }}:{{ docker_image_tag }}'
    name: '{{ openldap_container_name }}'
    ports: '{{ container_port_map.ldap.port_args }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes_from:
      - '{{ openssl_dv_name }}'
      - '{{ openldap_dv_name }}'

- name: start container (phpldapadmin)
  docker_container:
    detach: true
    env:
      PHPLDAPADMIN_HTTPS: 'false'
      PHPLDAPADMIN_LDAP_HOSTS: 'ldap'
      LDAP_HOSTNAME: '{{ container_addr_map.phpldapadmin.hostname }}'
    hostname: '{{ container_addr_map.ldap.hostname }}'
    image: '{{ phpldapadmin_image_name }}:{{ docker_image_tag }}'
    link: '{{ openldap_container_name }}:ldap'
    name: '{{ phpldapadmin_container_name }}'
    ports: '{{ container_port_map.phpldapadmin.port_args }}'
    restart_policy: '{{ docker_restart_policy }}'
    volumes_from:
      - '{{ openssl_dv_name }}'

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_openldap_restore.stat.exists == False

# *****************************************************************************
# Set the LDAP passwords

- name: wait for LDAP to start
  wait_for:
    delay: 5
    host: '{{ openldap_ip_addr }}'
    port: 389
    state: started

- name: set LDAP admin password
  command: 'docker exec -i {{ openldap_container_name }} /docker-entrypoint.sh set_admin_pass {{ openldap_admin_password | quote }}'

- name: set LDAP proxyagent password
  command: 'docker exec -i {{ openldap_container_name }} /docker-entrypoint.sh set_proxyagent_pass {{ openldap_admin_password | quote }} {{ openldap_proxyagent_password | quote }}'
